
FinalProjectFromScratch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000004da  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800074  00800074  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154a  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005fb  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a78  00000000  00000000  000022e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00002d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a23  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aaf  00000000  00000000  00003bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000467e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_7>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_13>
  38:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_14>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_16>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	dc 00       	.word	0x00dc	; ????

00000056 <__ctors_end>:
  56:	e1 00       	.word	0x00e1	; ????

00000058 <__dtors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf e5       	ldi	r28, 0x5F	; 95
  5e:	d8 e0       	ldi	r29, 0x08	; 8
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	a0 e6       	ldi	r26, 0x60	; 96
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	ea ed       	ldi	r30, 0xDA	; 218
  6c:	f4 e0       	ldi	r31, 0x04	; 4
  6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
  70:	05 90       	lpm	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	a4 37       	cpi	r26, 0x74	; 116
  76:	b1 07       	cpc	r27, r17
  78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	a4 e7       	ldi	r26, 0x74	; 116
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
  82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
  84:	a4 3b       	cpi	r26, 0xB4	; 180
  86:	b2 07       	cpc	r27, r18
  88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	cb e2       	ldi	r28, 0x2B	; 43
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
  92:	21 97       	sbiw	r28, 0x01	; 1
  94:	fe 01       	movw	r30, r28
  96:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__tablejump2__>
  9a:	ca 32       	cpi	r28, 0x2A	; 42
  9c:	d1 07       	cpc	r29, r17
  9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
  a0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  a4:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__do_global_dtors>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_ZN8InverterC1Ev>:

int Inverter::getOverloadInputReadings()
{
	//double readings = static_cast<double> (this->analog_overload_value);
	return ( ( this->analog_overload_value / 51 ) * 20 );
}
  ac:	fc 01       	movw	r30, r24
  ae:	11 82       	std	Z+1, r1	; 0x01
  b0:	10 82       	st	Z, r1
  b2:	13 82       	std	Z+3, r1	; 0x03
  b4:	12 82       	std	Z+2, r1	; 0x02
  b6:	15 82       	std	Z+5, r1	; 0x05
  b8:	14 82       	std	Z+4, r1	; 0x04
  ba:	f8 94       	cli
  bc:	87 b3       	in	r24, 0x17	; 23
  be:	88 63       	ori	r24, 0x38	; 56
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	80 6c       	ori	r24, 0xC0	; 192
  c6:	81 bb       	out	0x11, r24	; 17
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	83 7c       	andi	r24, 0xC3	; 195
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	80 66       	ori	r24, 0x60	; 96
  d2:	87 b9       	out	0x07, r24	; 7
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	8c 60       	ori	r24, 0x0C	; 12
  d8:	86 b9       	out	0x06, r24	; 6
  da:	37 9a       	sbi	0x06, 7	; 6
  dc:	78 94       	sei
  de:	36 9a       	sbi	0x06, 6	; 6
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <_ZN8InverterC1Ev+0x3a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_ZN8InverterC1Ev+0x44>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <_ZN8InverterD1Ev>:
  f4:	08 95       	ret

000000f6 <_ZN8Inverter18analogPinSwitchingEv>:

void Inverter::analogPinSwitching()
{
  f6:	fc 01       	movw	r30, r24
	switch(ADMUX)
  f8:	97 b1       	in	r25, 0x07	; 7
  fa:	91 36       	cpi	r25, 0x61	; 97
  fc:	59 f0       	breq	.+22     	; 0x114 <_ZN8Inverter18analogPinSwitchingEv+0x1e>
  fe:	92 36       	cpi	r25, 0x62	; 98
 100:	81 f0       	breq	.+32     	; 0x122 <_ZN8Inverter18analogPinSwitchingEv+0x2c>
 102:	90 36       	cpi	r25, 0x60	; 96
 104:	a9 f4       	brne	.+42     	; 0x130 <_ZN8Inverter18analogPinSwitchingEv+0x3a>
	{
		case 0x60: //check the pin on Analog Multiplexer Pin layout
			//conversion for AC input
			//ad_ac_readings = ADCH;
			this->setAcAnalogValue(ADCH);
 106:	85 b1       	in	r24, 0x05	; 5
 108:	90 e0       	ldi	r25, 0x00	; 0

}

void Inverter::setAcAnalogValue(uint16_t value)
{
	this->analog_ac_value = value;
 10a:	91 83       	std	Z+1, r25	; 0x01
 10c:	80 83       	st	Z, r24
	{
		case 0x60: //check the pin on Analog Multiplexer Pin layout
			//conversion for AC input
			//ad_ac_readings = ADCH;
			this->setAcAnalogValue(ADCH);
			ADMUX = 0x61; //set to enable next pin for analog conversion
 10e:	81 e6       	ldi	r24, 0x61	; 97
 110:	87 b9       	out	0x07, r24	; 7
		break;
 112:	08 95       	ret
		
		case 0x61:
			//Conversion for Battery level
			//ad_batt_readings = ADCH;
			this->setBattAnalogValue(ADCH);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	90 e0       	ldi	r25, 0x00	; 0
	this->analog_ac_value = value;
}

void Inverter::setBattAnalogValue(uint16_t value)
{
	this->analog_batt_value = value;
 118:	93 83       	std	Z+3, r25	; 0x03
 11a:	82 83       	std	Z+2, r24	; 0x02
		
		case 0x61:
			//Conversion for Battery level
			//ad_batt_readings = ADCH;
			this->setBattAnalogValue(ADCH);
			ADMUX = 0x62;  //set to enable next pin for analog conversion
 11c:	82 e6       	ldi	r24, 0x62	; 98
 11e:	87 b9       	out	0x07, r24	; 7
		break;
 120:	08 95       	ret
		
		case 0x62:
			//conversion for Overload
			//ad_overload_readings = ADCH;
			this->setOverloadAnalogValue(ADCH);
 122:	85 b1       	in	r24, 0x05	; 5
 124:	90 e0       	ldi	r25, 0x00	; 0
	this->analog_batt_value = value;
}

void Inverter::setOverloadAnalogValue(uint16_t value)
{
	this->analog_overload_value = value;
 126:	95 83       	std	Z+5, r25	; 0x05
 128:	84 83       	std	Z+4, r24	; 0x04
		
		case 0x62:
			//conversion for Overload
			//ad_overload_readings = ADCH;
			this->setOverloadAnalogValue(ADCH);
			ADMUX = 0x60;  //set to enable next pin for analog conversion
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	87 b9       	out	0x07, r24	; 7
		break;
 12e:	08 95       	ret
		
		default:
			// default
			ADMUX = 0x60; //set to first
 130:	80 e6       	ldi	r24, 0x60	; 96
 132:	87 b9       	out	0x07, r24	; 7
 134:	08 95       	ret

00000136 <__vector_7>:
    }
}


ISR(TIMER1_COMPA_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
	//battery level monitoring
	//batteryMonitoring();
	
	//display on LCD
	//displayInverterState();
}
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_16>:


ISR(ADC_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	//allow all MCU to read from all enabled analog pin
	inverter.analogPinSwitching();
 16c:	84 e7       	ldi	r24, 0x74	; 116
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN8Inverter18analogPinSwitchingEv>
	//start new conversion
	ADCSRA |= 1<<ADSC;
 174:	36 9a       	sbi	0x06, 6	; 6
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <_Z14my_timer_setupv>:

void my_timer_setup()
{
	//1000000/64 = 15625
	TCCR1B |= (1<<WGM12) | (1<<CS11) | (1<<CS10);
 198:	8e b5       	in	r24, 0x2e	; 46
 19a:	8b 60       	ori	r24, 0x0B	; 11
 19c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);
 19e:	89 b7       	in	r24, 0x39	; 57
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	89 bf       	out	0x39, r24	; 57
	OCR1A = 15624; //timer overflow value set to 1sec
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	9d e3       	ldi	r25, 0x3D	; 61
 1a8:	9b bd       	out	0x2b, r25	; 43
 1aa:	8a bd       	out	0x2a, r24	; 42
 1ac:	08 95       	ret

000001ae <main>:
//function prototype
void my_timer_setup();

int main(void)
{
	cli(); //clear global interrupt
 1ae:	f8 94       	cli
	sei(); //Enable Global Interrupt
 1b0:	78 94       	sei
	my_timer_setup();
 1b2:	0e 94 cc 00 	call	0x198	; 0x198 <_Z14my_timer_setupv>
Inverter inverter; //initialize inverter

//function prototype
void my_timer_setup();

int main(void)
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <main+0x8>

000001b8 <_GLOBAL__sub_I_inverter>:
#include <avr/interrupt.h>
#include <stdint.h>
#include "Inverter.h"
#include "serial.h"

Inverter inverter; //initialize inverter
 1b8:	84 e7       	ldi	r24, 0x74	; 116
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 56 00 	call	0xac	; 0xac <_ZN8InverterC1Ev>
 1c0:	08 95       	ret

000001c2 <_GLOBAL__sub_D_inverter>:
 1c2:	84 e7       	ldi	r24, 0x74	; 116
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN8InverterD1Ev>
 1ca:	08 95       	ret

000001cc <_Z22serialReceiveInterrupth>:
    } else {
        return 1;
    }
}

void serialReceiveInterrupt(uint8_t uart) {
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
    rxBuffer[uart][rxWrite[uart]] = *serialRegisters[uart][SERIALDATA];
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	9c 01       	movw	r18, r24
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	d9 01       	movw	r26, r18
 1da:	ae 57       	subi	r26, 0x7E	; 126
 1dc:	bf 4f       	sbci	r27, 0xFF	; 255
 1de:	4d 91       	ld	r20, X+
 1e0:	5c 91       	ld	r21, X
 1e2:	11 97       	sbiw	r26, 0x01	; 1
 1e4:	f9 01       	movw	r30, r18
 1e6:	e8 0f       	add	r30, r24
 1e8:	f9 1f       	adc	r31, r25
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	e9 59       	subi	r30, 0x99	; 153
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	01 90       	ld	r0, Z+
 1f8:	f0 81       	ld	r31, Z
 1fa:	e0 2d       	mov	r30, r0
 1fc:	20 81       	ld	r18, Z
 1fe:	fc 01       	movw	r30, r24
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e2 95       	swap	r30
 206:	f2 95       	swap	r31
 208:	f0 7f       	andi	r31, 0xF0	; 240
 20a:	fe 27       	eor	r31, r30
 20c:	e0 7f       	andi	r30, 0xF0	; 240
 20e:	fe 27       	eor	r31, r30
 210:	e4 0f       	add	r30, r20
 212:	f5 1f       	adc	r31, r21
 214:	ec 56       	subi	r30, 0x6C	; 108
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	20 83       	st	Z, r18
    if (rxWrite[uart] < (RX_BUFFER_SIZE - 1)) {
 21a:	2d 91       	ld	r18, X+
 21c:	3c 91       	ld	r19, X
 21e:	11 97       	sbiw	r26, 0x01	; 1
 220:	2f 31       	cpi	r18, 0x1F	; 31
 222:	31 05       	cpc	r19, r1
 224:	40 f4       	brcc	.+16     	; 0x236 <_Z22serialReceiveInterrupth+0x6a>
        rxWrite[uart]++;
 226:	fd 01       	movw	r30, r26
 228:	20 81       	ld	r18, Z
 22a:	31 81       	ldd	r19, Z+1	; 0x01
 22c:	2f 5f       	subi	r18, 0xFF	; 255
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
 230:	31 83       	std	Z+1, r19	; 0x01
 232:	20 83       	st	Z, r18
 234:	07 c0       	rjmp	.+14     	; 0x244 <_Z22serialReceiveInterrupth+0x78>
    } else {
        rxWrite[uart] = 0;
 236:	fc 01       	movw	r30, r24
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	ee 57       	subi	r30, 0x7E	; 126
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	11 82       	std	Z+1, r1	; 0x01
 242:	10 82       	st	Z, r1
    }

#ifdef FLOWCONTROL
    rxBufferElements[uart]++;
 244:	fc 01       	movw	r30, r24
 246:	e6 58       	subi	r30, 0x86	; 134
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	20 81       	ld	r18, Z
 24c:	2f 5f       	subi	r18, 0xFF	; 255
 24e:	20 83       	st	Z, r18
    if ((flow[uart] == 1) && (rxBufferElements[uart] >= (RX_BUFFER_SIZE - FLOWMARK))) {
 250:	fc 01       	movw	r30, r24
 252:	e5 58       	subi	r30, 0x85	; 133
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	20 81       	ld	r18, Z
 258:	21 30       	cpi	r18, 0x01	; 1
 25a:	09 f0       	breq	.+2      	; 0x25e <_Z22serialReceiveInterrupth+0x92>
 25c:	4e c0       	rjmp	.+156    	; 0x2fa <_Z22serialReceiveInterrupth+0x12e>
 25e:	fc 01       	movw	r30, r24
 260:	e6 58       	subi	r30, 0x86	; 134
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	20 81       	ld	r18, Z
 266:	2b 31       	cpi	r18, 0x1B	; 27
 268:	c8 f5       	brcc	.+114    	; 0x2dc <_Z22serialReceiveInterrupth+0x110>
 26a:	47 c0       	rjmp	.+142    	; 0x2fa <_Z22serialReceiveInterrupth+0x12e>
        sendThisNext[uart] = XOFF;
        flow[uart] = 0;
        if (shouldStartTransmission[uart]) {
            shouldStartTransmission[uart] = 0;
 26c:	fc 01       	movw	r30, r24
 26e:	e3 58       	subi	r30, 0x83	; 131
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	10 82       	st	Z, r1
            *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALUDRIE]); // Enable Interrupt
 274:	fc 01       	movw	r30, r24
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e8 0f       	add	r30, r24
 27c:	f9 1f       	adc	r31, r25
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	e9 59       	subi	r30, 0x99	; 153
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	c2 81       	ldd	r28, Z+2	; 0x02
 28c:	d3 81       	ldd	r29, Z+3	; 0x03
 28e:	48 81       	ld	r20, Y
 290:	dc 01       	movw	r26, r24
 292:	aa 0f       	add	r26, r26
 294:	bb 1f       	adc	r27, r27
 296:	aa 0f       	add	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	aa 0f       	add	r26, r26
 29c:	bb 1f       	adc	r27, r27
 29e:	a8 1b       	sub	r26, r24
 2a0:	b9 0b       	sbc	r27, r25
 2a2:	a0 5a       	subi	r26, 0xA0	; 160
 2a4:	bf 4f       	sbci	r27, 0xFF	; 255
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9c 01       	movw	r18, r24
 2ac:	15 96       	adiw	r26, 0x05	; 5
 2ae:	0c 90       	ld	r0, X
 2b0:	15 97       	sbiw	r26, 0x05	; 5
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <_Z22serialReceiveInterrupth+0xec>
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <_Z22serialReceiveInterrupth+0xe8>
 2bc:	24 2b       	or	r18, r20
 2be:	28 83       	st	Y, r18
            *serialRegisters[uart][SERIALA] |= (1 << serialBits[uart][SERIALUDRE]); // Trigger Interrupt
 2c0:	06 80       	ldd	r0, Z+6	; 0x06
 2c2:	f7 81       	ldd	r31, Z+7	; 0x07
 2c4:	e0 2d       	mov	r30, r0
 2c6:	20 81       	ld	r18, Z
 2c8:	16 96       	adiw	r26, 0x06	; 6
 2ca:	0c 90       	ld	r0, X
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <_Z22serialReceiveInterrupth+0x106>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <_Z22serialReceiveInterrupth+0x102>
 2d6:	82 2b       	or	r24, r18
 2d8:	80 83       	st	Z, r24
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <_Z22serialReceiveInterrupth+0x12e>
    }

#ifdef FLOWCONTROL
    rxBufferElements[uart]++;
    if ((flow[uart] == 1) && (rxBufferElements[uart] >= (RX_BUFFER_SIZE - FLOWMARK))) {
        sendThisNext[uart] = XOFF;
 2dc:	23 e1       	ldi	r18, 0x13	; 19
 2de:	fc 01       	movw	r30, r24
 2e0:	e4 58       	subi	r30, 0x84	; 132
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	20 83       	st	Z, r18
        flow[uart] = 0;
 2e6:	fc 01       	movw	r30, r24
 2e8:	e5 58       	subi	r30, 0x85	; 133
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	10 82       	st	Z, r1
        if (shouldStartTransmission[uart]) {
 2ee:	fc 01       	movw	r30, r24
 2f0:	e3 58       	subi	r30, 0x83	; 131
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	20 81       	ld	r18, Z
 2f6:	21 11       	cpse	r18, r1
 2f8:	b9 cf       	rjmp	.-142    	; 0x26c <_Z22serialReceiveInterrupth+0xa0>
            *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALUDRIE]); // Enable Interrupt
            *serialRegisters[uart][SERIALA] |= (1 << serialBits[uart][SERIALUDRE]); // Trigger Interrupt
        }
    }
#endif
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <_Z23serialTransmitInterrupth>:

void serialTransmitInterrupt(uint8_t uart) {
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
#ifdef FLOWCONTROL
    if (sendThisNext[uart]) {
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	e4 58       	subi	r30, 0x84	; 132
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	20 81       	ld	r18, Z
 30e:	22 23       	and	r18, r18
 310:	a1 f0       	breq	.+40     	; 0x33a <_Z23serialTransmitInterrupth+0x3a>
        *serialRegisters[uart][SERIALDATA] = sendThisNext[uart];
 312:	fc 01       	movw	r30, r24
 314:	ee 0f       	add	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	e8 0f       	add	r30, r24
 31a:	f9 1f       	adc	r31, r25
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	ee 0f       	add	r30, r30
 322:	ff 1f       	adc	r31, r31
 324:	e9 59       	subi	r30, 0x99	; 153
 326:	ff 4f       	sbci	r31, 0xFF	; 255
 328:	a0 81       	ld	r26, Z
 32a:	b1 81       	ldd	r27, Z+1	; 0x01
 32c:	fc 01       	movw	r30, r24
 32e:	e4 58       	subi	r30, 0x84	; 132
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	80 81       	ld	r24, Z
 334:	8c 93       	st	X, r24
        sendThisNext[uart] = 0;
 336:	10 82       	st	Z, r1
 338:	70 c0       	rjmp	.+224    	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
    } else {
#endif
        if (txRead[uart] != txWrite[uart]) {
 33a:	9c 01       	movw	r18, r24
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	f9 01       	movw	r30, r18
 342:	e0 58       	subi	r30, 0x80	; 128
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	40 81       	ld	r20, Z
 348:	51 81       	ldd	r21, Z+1	; 0x01
 34a:	f9 01       	movw	r30, r18
 34c:	e2 58       	subi	r30, 0x82	; 130
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	20 81       	ld	r18, Z
 352:	31 81       	ldd	r19, Z+1	; 0x01
 354:	42 17       	cp	r20, r18
 356:	53 07       	cpc	r21, r19
 358:	b9 f1       	breq	.+110    	; 0x3c8 <_Z23serialTransmitInterrupth+0xc8>
            *serialRegisters[uart][SERIALDATA] = txBuffer[uart][txRead[uart]];
 35a:	fc 01       	movw	r30, r24
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	df 01       	movw	r26, r30
 362:	a8 0f       	add	r26, r24
 364:	b9 1f       	adc	r27, r25
 366:	aa 0f       	add	r26, r26
 368:	bb 1f       	adc	r27, r27
 36a:	aa 0f       	add	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	a9 59       	subi	r26, 0x99	; 153
 370:	bf 4f       	sbci	r27, 0xFF	; 255
 372:	cd 91       	ld	r28, X+
 374:	dc 91       	ld	r29, X
 376:	e0 58       	subi	r30, 0x80	; 128
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	20 81       	ld	r18, Z
 37c:	31 81       	ldd	r19, Z+1	; 0x01
 37e:	dc 01       	movw	r26, r24
 380:	a2 95       	swap	r26
 382:	b2 95       	swap	r27
 384:	b0 7f       	andi	r27, 0xF0	; 240
 386:	ba 27       	eor	r27, r26
 388:	a0 7f       	andi	r26, 0xF0	; 240
 38a:	ba 27       	eor	r27, r26
 38c:	a2 0f       	add	r26, r18
 38e:	b3 1f       	adc	r27, r19
 390:	ac 57       	subi	r26, 0x7C	; 124
 392:	bf 4f       	sbci	r27, 0xFF	; 255
 394:	2c 91       	ld	r18, X
 396:	28 83       	st	Y, r18
            if (txRead[uart] < (TX_BUFFER_SIZE -1)) {
 398:	20 81       	ld	r18, Z
 39a:	31 81       	ldd	r19, Z+1	; 0x01
 39c:	2f 30       	cpi	r18, 0x0F	; 15
 39e:	31 05       	cpc	r19, r1
 3a0:	58 f4       	brcc	.+22     	; 0x3b8 <_Z23serialTransmitInterrupth+0xb8>
                txRead[uart]++;
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	fc 01       	movw	r30, r24
 3a8:	e0 58       	subi	r30, 0x80	; 128
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	80 81       	ld	r24, Z
 3ae:	91 81       	ldd	r25, Z+1	; 0x01
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	91 83       	std	Z+1, r25	; 0x01
 3b4:	80 83       	st	Z, r24
 3b6:	31 c0       	rjmp	.+98     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
            } else {
                txRead[uart] = 0;
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	fc 01       	movw	r30, r24
 3be:	e0 58       	subi	r30, 0x80	; 128
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	11 82       	std	Z+1, r1	; 0x01
 3c4:	10 82       	st	Z, r1
 3c6:	29 c0       	rjmp	.+82     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
            }
        } else {
            shouldStartTransmission[uart] = 1;
 3c8:	fc 01       	movw	r30, r24
 3ca:	e3 58       	subi	r30, 0x83	; 131
 3cc:	ff 4f       	sbci	r31, 0xFF	; 255
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	20 83       	st	Z, r18
            *serialRegisters[uart][SERIALB] &= ~(1 << serialBits[uart][SERIALUDRIE]); // Disable Interrupt
 3d2:	fc 01       	movw	r30, r24
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	e8 0f       	add	r30, r24
 3da:	f9 1f       	adc	r31, r25
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	e9 59       	subi	r30, 0x99	; 153
 3e6:	ff 4f       	sbci	r31, 0xFF	; 255
 3e8:	a2 81       	ldd	r26, Z+2	; 0x02
 3ea:	b3 81       	ldd	r27, Z+3	; 0x03
 3ec:	2c 91       	ld	r18, X
 3ee:	fc 01       	movw	r30, r24
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	e8 1b       	sub	r30, r24
 3fe:	f9 0b       	sbc	r31, r25
 400:	e0 5a       	subi	r30, 0xA0	; 160
 402:	ff 4f       	sbci	r31, 0xFF	; 255
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	05 80       	ldd	r0, Z+5	; 0x05
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	8c 93       	st	X, r24
        }
#ifdef FLOWCONTROL
    }
#endif
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <__vector_13>:

ISR(SERIALRECIEVEINTERRUPT) { // Receive complete
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
    serialReceiveInterrupt(0);
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z22serialReceiveInterrupth>
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	bf 91       	pop	r27
 44e:	af 91       	pop	r26
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	7f 91       	pop	r23
 456:	6f 91       	pop	r22
 458:	5f 91       	pop	r21
 45a:	4f 91       	pop	r20
 45c:	3f 91       	pop	r19
 45e:	2f 91       	pop	r18
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <__vector_14>:

ISR(SERIALTRANSMITINTERRUPT) { // Data register empty
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
    serialTransmitInterrupt(0);
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 80 01 	call	0x300	; 0x300 <_Z23serialTransmitInterrupth>
}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__tablejump2__>:
 4b4:	ee 0f       	add	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	05 90       	lpm	r0, Z+
 4ba:	f4 91       	lpm	r31, Z
 4bc:	e0 2d       	mov	r30, r0
 4be:	09 94       	ijmp

000004c0 <__do_global_dtors>:
 4c0:	10 e0       	ldi	r17, 0x00	; 0
 4c2:	cb e2       	ldi	r28, 0x2B	; 43
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__do_global_dtors+0x10>
 4c8:	fe 01       	movw	r30, r28
 4ca:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__tablejump2__>
 4ce:	21 96       	adiw	r28, 0x01	; 1
 4d0:	cc 32       	cpi	r28, 0x2C	; 44
 4d2:	d1 07       	cpc	r29, r17
 4d4:	c9 f7       	brne	.-14     	; 0x4c8 <__do_global_dtors+0x8>
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
